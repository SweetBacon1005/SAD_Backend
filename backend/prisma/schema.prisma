generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                          String    @id @default(auto()) @map("_id") @db.ObjectId
  name                        String
  email                       String    @unique
  password                    String
  role                        UserRole  @default(CUSTOMER)
  isActive                    Boolean   @default(true)
  addresses                   Address[]
  isEmailVerified             Boolean   @default(false)
  emailVerificationOTP        String?
  emailVerificationOTPExpires DateTime?
  passwordResetOTP            String?
  passwordResetOTPExpires     DateTime?
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime? @updatedAt
  wishlist                    Wishlist?
  cart                        Cart?
  orders                      Order[]
  reviews                     Review[]
  notifications               Notification[]
}

enum UserRole {
  ADMIN
  MANAGER
  CUSTOMER
}

model Address {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String  @db.ObjectId
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  addressLine String
  phone       String
  isDefault   Boolean @default(false)
  city        String?
  state       String?
  country     String?
  postalCode  String?
}

model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  products    Product[]
}

model Product {
  id            String           @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  basePrice     Float            @default(0)
  quantity      Int              @default(0)
  categoryId    String?          @db.ObjectId
  category      Category?        @relation(fields: [categoryId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  storeId       String?          @db.ObjectId
  store         Store?           @relation(fields: [storeId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  images        String[]
  options       Json?
  variants      ProductVariant[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime?        @updatedAt
  cartItems     CartItem[]
  orderItems    OrderItem[]
  wishlistItems WishlistItem[]
  reviews       Review[]
}

model ProductVariant {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  productId   String    @db.ObjectId
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  price       Float     @default(0)
  costPrice   Float     @default(0)
  quantity    Int       @default(0)
  attributes  Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Store {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  address     String
  phone       String
  email       String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  products    Product[]
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @unique @db.ObjectId
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]
  metadata  Json?
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
}

model CartItem {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId        String   @db.ObjectId
  cart          Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId     String   @db.ObjectId
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantId     String?  @db.ObjectId
  selectedPrice Float    @default(0)
  quantity      Int
  attributes    Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Order {
  id                    String         @id @default(auto()) @map("_id") @db.ObjectId
  userId                String         @db.ObjectId
  user                  User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  status                OrderStatus    @default(PENDING)
  items                 OrderItem[]
  subtotal              Float
  total                 Float
  discountAmount        Float?
  voucherId             String?        @db.ObjectId
  shippingInfoId        String         @db.ObjectId
  shippingInfo          ShippingInfo   @relation(fields: [shippingInfoId], references: [id], onDelete: Cascade)
  paymentStatus         PaymentStatus  @default(PENDING)
  paymentMethod         PaymentMethod?
  payment               Payment?
  notes                 String?
  estimatedDeliveryDate DateTime?
  shippedAt             DateTime?
  deliveredAt           DateTime?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime?      @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  VNPAY
  COD
}

model OrderItem {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String  @db.ObjectId
  order      Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId  String  @db.ObjectId
  product    Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantId  String? @db.ObjectId
  quantity   Int
  price      Float
  attributes Json?
}

model ShippingInfo {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  addressLine String
  phone       String?
  orders      Order[]
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
  CANCELLED
  REFUNDED
  PARTIALLY_REFUNDED
}

model PaymentTransaction {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  paymentId     String            @db.ObjectId
  payment       Payment           @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  transactionId String            @unique
  status        TransactionStatus @default(PENDING)
  amount        Float
  currency      String            @default("VND")
  paymentMethod PaymentMethod
  provider      String
  providerData  Json?
  errorMessage  String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime?         @updatedAt
}

model Payment {
  id            String               @id @default(auto()) @map("_id") @db.ObjectId
  orderId       String               @unique @db.ObjectId
  order         Order                @relation(fields: [orderId], references: [id], onDelete: Cascade)
  status        PaymentStatus
  paymentMethod PaymentMethod
  amount        Float
  transactions  PaymentTransaction[]
  createdAt     DateTime             @default(now())
  updatedAt     DateTime?            @updatedAt
}

model Wishlist {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  userId      String         @unique @db.ObjectId
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       WishlistItem[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime?      @updatedAt
}

model WishlistItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  wishlistId String   @db.ObjectId
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  productId  String   @db.ObjectId
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  addedAt    DateTime @default(now())
  note       String?
}

model Review {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId   String    @db.ObjectId
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating      Int
  title       String
  comment     String
  images      String[]
  isPublished Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Voucher {
  id            String            @id @default(auto()) @map("_id") @db.ObjectId
  code          String            @unique
  name          String
  description   String?
  discountType  DiscountType
  discountValue Float
  minOrderValue Float             @default(0)
  maxDiscount   Float?
  startDate     DateTime
  endDate       DateTime
  isActive      Boolean           @default(true)
  usageLimit    Int?
  usageCount    Int               @default(0)
  applicableFor VoucherApplicable @default(ALL)
  conditions    Json?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime?         @updatedAt
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum VoucherApplicable {
  ALL
  SPECIFIC_CATEGORIES
  SPECIFIC_PRODUCTS
  SPECIFIC_USERS
  FIRST_ORDER
}

enum NotificationType {
  ORDER_STATUS
  PAYMENT_STATUS
  SHIPPING_UPDATE
  PROMOTION
  SYSTEM
  REVIEW_RESPONSE
}

model Notification {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  userId      String           @db.ObjectId
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  type        NotificationType
  title       String
  message     String
  isRead      Boolean          @default(false)
  data        Json?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime?        @updatedAt
}
